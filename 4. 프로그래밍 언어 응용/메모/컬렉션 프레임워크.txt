컬렉션 프레임워크(Collections Framework)

컬렉션(Collections) - 데이터 군
프레임워크(Framework)

데이터 군을 다르는데 필요한 클래스를 표준화서 설계


1. 컬렉션 프레임워크 핵심 인터페이스

Collection:
	1) List: 순차 자료구조
		- 순서가 유지되는 자료 - 예) 배열
		- 값 중복 허용
	
		추가
			add(E e)
			add(int index, E e)
			addAll(....) 

		조회
			E get(int Index)
	
			boolean contains(E e): 요소의 포함여부
			int indexOf(E e): 요소의 위치값을 반환(좌 -> 우)
			int lastIndexOf(E e): 요소의 위치값을 반환(우 -> 좌), 없을 땐 -1

		변경	
			set(int index, E e);
		
		제거
			E remove(int index): 순서 번호로 요소 삭제
			void remove(E e)

			retailAll(Collection ...): 매개변수의 콜렉션 객체의 자료만 유지하고 삭제(교집합)
	
		기타
			size(): 요소의 개수
		
		구현 클래스
			- ArrayList: 배열을 구현한 클래스
				Object[] elementData
				- 기본 값은 10개 공간을 가지고 있는 배열 생성
				- 같은 자료형 + 물리적으로 붙어있는 순차 구조
					-> 조회 속도가 매우 빠르다.
			- 배열의 공간이 부족 -> 새로운 배열을 생성(2배씩 큰 용량으로 생성)

			단점:
				물리적 배열은 변경은 X -> 새로 생성
					-> 잦은 순서 변경(추가, 삭제): 성능 저하

		- LinkedList
			- 요소간의 연결 관계 순서가 결정
			- 추가, 삭제 시 빠르게 진행
			- 조회 시 ArrayList보다는 불리

		- Vector
		- Stack

	2) Set: 집합 자료구조
		- 중복을 허용하지 않는 자료
		- 순서는 유지 X

		참고)
			A집합 - 3, 4, 1, 2
			B집합 - 3, 4, 5, 6
			A와 B의 합집합 - 1, 2, 3, 4, 5, 6

		추가
			E add(E e);
			void addAll(Collection ..)

		조회
			boolean contains(Collection ...)

		제거
			void remove(E e)

		기타
			size(): 요소의 개수

		구현된 클래스
			HashSet
			TreeSet
				- HashSet 동일한 역할(중복 X)
					+ 정렬(Sort)

	3) Map: 사전 자료구조
		키, 값의 쌍의 구조

		키 -> 값을 찾기위한 용도
			- 중복 허용 X (Set)

		값 -> 값은 중복을 허용
			(Collections)

2. Stack과 Queue

	Stack 클래스
		push(E e): 끝에 추가
		E pop(): 마지막 요소를 꺼내온다.

	Queue 인터페이스
		offer(E e): 끝에 추가
		E poll(): 앞에서 요소를 꺼내온다.

3. Iterator, ListIterator, Enumeration
- 반복자

Iterator: Collection 인터페이스에 정의
	boolean hasNext(): 다음 요소가 있는지 체크
	E next(): 다음 요소를 가져오기

	- 반복은 1번만 한다. (일회용)
	- 다시 반복을 하시려면 Iterator()

ListIterator: List 인터페이스에 정의

4. Comparator과 Comparable

5. Arrays	

	- java.util.Arrays: 배열의 편의기능 클래스
		List<T> asList(T... items)

		equals(...): 1차원 배열 비교
		deppEquals(...): 다차원 배열 비교

		toString(...): 1차원 배열의 값 출력
		deepToString(...): 다차원 배열의 값 출력


6. Collections
	- java.util.Collections: 컬렉션(List, Set, Map)의 편의 클래스

































































