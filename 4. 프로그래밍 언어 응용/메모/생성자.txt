생성자
- 클래스명과 동일한 명칭의 함수 
- 객체를 생성해 주는 역할 

데이터 영역 메모리(코드 & 상수 영역 메모리)

클래스 로더 -> 클래스 파일 -> 데이터 영역 로드 

1. 디폴트 생성자(기본 생성자)
	- 클래스에 생성자 메서드가 정의된 것이 없으면 -> 컴파일러가 자동 추가
		public 클래스명() {}
		
2. 생성자 만들기
3. 생성자 오버로드
	

	- 함수의 시그니쳐 
		패키지명.클래스명 반환값 타입 메서드명(매개변수 ...) 예외전가
			- 시그니쳐가 동일하면 - 함수의 중복 정의 - 오류 발생
			- 시그니쳐가 동일하지 않으면 -> 다른 함수를 정의 
	- 메서드 오버로드 
		- 동일 함수명으로 다양한 매개변수, 반환값, 예외 전가등을 다르게 정의해서 여러개를 정의
	
정보 은닉
- 멤버 변수에 직접 값을 대입하는 것 -> 통제 불가 : 사용을 지양 (멤버 변수의 접근 제어자(private))
- 멤버 변수의 값을 확인할 수 있는 접근 가능한 메서드 추가

1. 접근제어자 정리
	public : 다른 패키지에서도 접근이 가능 
	protected : 동일 패키지에서 접근 가능(default) + 외부 패키지에 있는 클래스에서 상속을 받으면 클래스 내부에서 접근 가능(private)
	default : 접근 제어자를 명시 X  : 동일 패키지에서 접근 가능
	private : 클래스 내부에서만 접근 가능

	참고)
		다른 패키지에 있는 클래스를 사용하려면 import
		import 패키지명.클래스명;
		
2. get(), set() 메서드

this 예약어	
	지역변수: 모든 인스턴스 메서드에 존재하는 지역변수
		생성된 객체의 주소값 가지고 있는 지역변수

	메서드: 클래스 내부에서 생성자 메서드를 호출할 때 (this(...))

static 변수
	static: 정적인, 고정된
	- 데이터 영역에 공간 할당, 변수가 된다
	- 클래스 로더 -> 클래스가 코드가 구성될 때 변수가 된다.
	- 객체 생성과는 관련없는 변수!
	- 객체의 참조 변수로 접근하면 인스턴스 변수와 혼동 우려 -> X
	- 정적인 방법으로 접근
		(클래스명으로 접근)
	- 클래스 변수


	참고)
	정적 메모리: 생성되면 애플리케이션 종료까지 유지되는 메모리
		(데이터 영역)		

	동적 메모리: 생성 소멸을 반복하는 메모리
		(스택, 힙 영역)

static 메서드
	- 객체 생성과는 상관없이 사용가능한 메서드
	- 정적인 방법으로 접근(클래스명)
	- 클래스 메서드
	- this 지역 변수 X
	- 객체의 자원(인스턴스 자원)은 접근 불가(멤버 변수, 멤버 메서드)

변수의 유효범위
1. 지역변수
	- 함수가 호출되면 스택에서 생성되고, 함수가 종료되면 스택에서 제거되는 변수

2. 멤버변수(인스턴스 변수)
	- 객체가 생성되면 힙 메모리에서 생성되고 참조가 끊기면 가비지 콜렉터에 의해서 제거되는 변수

3. static 변수 
	- 클래스 로더 -> 코드 구성 -> 변수공간을 데이터 영역에서 할당
	- 애플리케이션 종료 시 제거

static 응용 - 싱글톤 패턴
	- 한개를 가지고 공유
	- 기능 담당하는 객체 //객체를 만들 이유가 없기 때문에 기능을 담당하면 static - 싱글톤
	
	예)
		java.util 패키지
			.Arrays
			
		java.lang
			Math: 수학관련 기능 모음 클래스

	- 필요한 시점에 하나의 객체를 생성하고 공유

	1) 생성자를 외부에서 생성하지 못하도록 접근 제어자를 private로 지정
	
	2) 객체를 클래스 내부에서 생성

	3) 내부에 생성된 객체를 접근할 수 있는 메서드를 추가한다.




















































-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------










