추상 클래스

추상적: 정해지지 않은 <--- ---> 구체적 : 정해진
        : 공통적인

1. 추상 클래스란? 
- 추상 클래스: 메서드의 구현체가 구현되지 않은 클래스, 하위 클래스가 공유하는 공통 기능, 변수
- 구체적 클래스: 메서드의 구현체가 완전히 구현된 클래스

2. 추상 클래스 문법

- 추상 메서드에 abstract 예약어를 추가
- 추상 클래스에서 class 앞에 abstract 예약어를 추가
- 불완전한 클래스 -> 추상 클래스만으로 객체를 생성 X
- 상속을 통해서 하위클래스가 객체가 된다.

- 추상 메서드는 하위클래스가 따라야할 원칙, 규칙 -> 설계 원칙 / 설계의 틀

- CTRL + 마우스 왼쪽 키

final 예약어
	- 변경 불가, 최종적

1. 변수: 상수
2. 메서드: 메서드 재정의 불가
3. 클래스: 상속 불가

인터페이스
	- 설계 목적의 용도로 정해진 클래스의 일종
	- 참고) 인터페이스 명세서 ☆★시험★☆

1. 인터페이스란?
	- 설계가 목적: 추상 메서드만 정의하기위한 목적의 클래스

2. 인터페이스 문법
	interface 인터페이스명{
		// 추상 메서드
	}
3. 클래스에서 인터페이스 구현하기
	class 하위클래스명 implements 인터페이스명{
		// 오버라이드
	}
4. 인터페이스 구현과 형변환(다형성)
콜렉션 프레임워크(Collection Framework)
List
Set
Map

5. 인터페이스의 요소 살펴보기
	1) 인터페이스 상수
	2) 디폴트 메서드
	
	3) 정적 메서드
	4) private 메서드

인터페이스 활용하기
1. 한 클래스가 여러 인터페이스를 구현하는 경우
- 여러인터페이스를 하나의 클래스에서 구현 가능


주문 - 판매자, 구매자

Buyer, Seller

Order


참고)
클래스에서 상속은 하나의 클래스만 상속 가능
	- 다중 상속 시 동일한 메서드가 각각 정의되면 어느 쪽을 실행할지 알 수 없다.

2. 두 인터페이스의 디폴트 메서드가 중복되는 경우
	- 실행이 애매함 -> 오류
	- 실행 출처를 하위클래스가 결정!
	- 하위클래스가 재정의 하거나...

3. 인터페이스 상속하기
	- extends
	- 클래스의 상속과는 다르다, 여러개를 상속 받을 수 있다.
