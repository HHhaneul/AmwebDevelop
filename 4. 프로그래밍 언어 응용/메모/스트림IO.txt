스트림
- collect()
	java.util.stream.Collectors
		toList, toSet, toMap(), toCollection(), toArray

		joining(): 문자열 결합

입출력(I/O)
1. 입출력이란?
	- Input/Output 입력/출력
	- 컴퓨터 내부 또는 외부와 프로그램간의 게이터를 주고받는 것

2. 스트림(stream)
	- 데이터가 이동하는 통로
	- 입력 통로(입력 스트림)
	- 출력 통로(출력 스트림)


바이트기반 스트림: 데이터 크기가 바이트 단위
1. 입력 스트림 - InputStream
	- abstract int read();

	구현 클래스
	- 기반 입력 스트림
		- 직접 데이터에 접근하는 스트림
		- FileInputtStream: 파일에서 직접 읽어오는 스트림
		- ByteArrayInputStream: 메모리에서 직접 읽어오는 스트림(변수)

			int read(): 읽기(1byte씩), 다 읽은 경우 -1
			int available(): 남아있는 바이트 수(0이면 다 읽어온 상태)
			void close(): 자원 해제

			- 1바이트씩 읽어오는 방식: 효율성 X
			- 버퍼를 사용해서 일정 용량만큼 담아서 처리하는 것이 효율적
				- int read(byte[] b): byte[] b: 버퍼 / 반환값은 읽어온 순서이다.

			참고)
				unsigned byte: 양의 정수(0~255)

				파일 끝에 도달하면 -1 반환
					0~255, -1 / int
		
	- 보조 입력 스트림
		- 직접 데이터에 접근 X, 다른 스트림에 보조적인 기능을 추가 제공
		- 매개변수 InputStream: 데코레이터 패턴
		- FilterInputStream
			- BufferedInputStream: 버퍼 기능을 InputStream 추가
			- DataInputStream: 기본 자료형을 데이터를 읽을 수 있는 기능 추가
				-> 끝까지 다 읽어온 경우에 다시 접근 -> EOFException: (End Of File)

		- ObjectInputStream: 객체로 읽어 오는 기능 추가


2. 출력 스트림 - OutputStream: 1byte씩 출력
	- abstract void write(int b)

	- 기반 출력 스트림
		- 직접 데이터에 접근하는 출력 스트림
		- FileOutputStream: 파일 출력 스트림
		- ByteArrayOutputStream: 메모리에 출력
	
	- 보조 출력 스트림
		- 직접 데이터에 접근 X, 다른 출력 스트림에 추가적인 기능을 제공
		- 매개변수가 OutputStream, 데이터 접근 X, 데코레이터 패턴
		
		- FilterOutputStream
			- BufferedOutputStream: 버퍼기능
			- DataOutputStream: 기본 자료형을 출력 기능을 추가

		- ObjectOutputStream: 객체를 출력할 수 있는 기능 추가


문자기반 스트림: 데이터 크기가 문자 단위(유니코드 - 2, 3 바이트)
1. 입력 스트림 - Reader
	- 기반 입력 스트림
		- 데이터에 직접 접근할 수 있는 스트림
		- FileReader
		- CharArrayReader
		- StringReader

	- 보조 입력 스트림
		- BufferedReader: 버퍼 기능 추가


2. 출력 스트림 - Writer
	- 기반 출력 스트림
		- 데이터에 직접 접근할 수 있는 스트림
		- FileWriter
		- CharArrayWriter
		- StringWriter

		- PrintStream
		- PrintWriter
		
	- 보조 출력 스트림
		- BufferedWrite: 버퍼 기능 추가


표준입출력: 콜솔에 입력, 출력
1. System.in: InputStream: 콘솔에서 입력 / 바이트 단위 스트림 -> 문자 단위 스트림으로 변환(InputStreamReader)
2. System.out: PrintStream
3. System.err: PrintStream

File


직렬화(Serialization)
- 객체에 저장된 데이터를 스트림에 쓰기(Write)위해 연속적인(serial) 데이터로 변환하는 것을 말한다.
1. ObjectInputStream
2. ObjectOutputStream







참고)
	InputStreamReader: 바이트 단위 입력 스트림 -> 문자 단위

	OutputStreamWriter: 바이트 단위 출력 스트림 -> 문자 단위






























--------------------------------------------------------------------------------------------------------------

class BufferedInputStream extends InputStream {

	private InputStream in;

	public BufferedInputStream(Input Stream in){
		this.in;		
	}

	pubilc int read(){

		// 버퍼 스트림 기능 추가
	
		int ch = in.read(); // 외부에서 주입받은 입력 스트림의 read()를 대신 수행

		return ch;
	}
}


--------------------------------------------------------------------------------------------------------------

java.io

바이트 단위 스트림
	입력 스트림(InputStream)
		기반 스트림
		
		보조 스트림
		
	출력 스트림(OutputStream)
		기반 스트림
		
		보조 스트림
		
문자 단위 스트림
	입력 스트림(Reader)
		기반 스트림
		
		보조 스트림

	출력 스트림(Writer)
		기반 스트림
		
		보조 스트림
		
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------







