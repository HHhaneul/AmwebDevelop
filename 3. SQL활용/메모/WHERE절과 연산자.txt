WHERE절과 연산자
1. 필요한 데이터만 출력하는 WHERE절
- 조건식: 참 거짓을 판별하는 연산식 (비교 연산자, 논리 연산자)
	-> 참이되면 - 레코드 출력

2. 여러 개 조건식을 사용하는 AND, OR 연산자

논리 연산자
	AND: 조건이 모두 참 -> 참
	OR: 조건 중에서 하나라도 참이면 참
	NOT: 참 -> 거짓, 거짓 -> 참
		: 조건식을 반대로 변경

3. 연산자 종류와 활용 방법 알아보기
1) 산술 연산자
	+, -, /, *

2) 비교 연산자
	>, <, >=, <=
	=: 같다.

	다르다
	!=
	<>
	^=

참고)
	DUAL: 더미 테이블(DUMMY)

	SELECT 10 + 20 FROM DUAL; - FROM DUAL: 생략불가 (오라클)
				 - MySQL: FROM DUAL 생략가능

3) 논리 부정 연산자
4) IN 연산자
   
참고)
	NOT IN: 포함되지 않는 조건

5) BETWEEN A AND B 연산자
	SAL >= 1000 AND SAL <= 2000

	SAL BETWEEN 1000 AND 2000;

6) LIKE 연산자와 와일드 카드
	- 포함 패턴으로 검색
	
	- 컬럼명 LIKE '검색어'; 컬럼명 = 검색어;
	- 컬럼명 LIKE '컬럼명%'; 검색어로 시작하는 패턴
	- 컬럼명 LIKE '%컬럼명'; 검색어로 끝나는 패턴 
	- 컬럼명 LIKE '%검색어%'; 검색어가 중간에 포함된 패턴
	
	- _: 문자 한개
		- 첫번째 문자는 아무거나
		- 두번째 문자는 L이 나오는 패턴
			LIKE '_L%'
	
	- %, _는 특수한 기능이 동작 -> 문자 그대로 사용 가능?
		-> ESCAPE로 표시 -> 그냥 문자로 인식
	

7) IS NULL 연산자
	NULL: 값이 없음
		: 연산불가 / 연산은 반드시 값이 존재해야 가능

	=, >, <로 비교 연산 불가
	
	- 별도 연산자를 통해서 NULL인 컬럼을 조회
		IS NULL: NULL인지 체크
		IS NOT NULL: NULL이 아닌 값 체크

		참고) IS: ~인지 아닌지
			
		NULL을 처리하는 함수
			- NVL(NULL 포함된 컬럼명, 기본값)
			- NVL2(NULL 포함된 컬럼명, 값이 있는 경우 대체 값, 값이 없을 때 대체 값)

		참고)
			빈값 ": 
				- 오라클: NULL
				- MySQL: 빈 값으로 판단(NULL이 아니다)

8) 집합 연산자
	- 집합 이론 + 관계 대수

	집합의 가장 중요한 특징?
	A - 1, 2, 3, 4
	B - 3, 4, 5, 6
	A와 B의 합집합 (1, 2, 3, 4, 5, 6)
		- 중복이 없다.
		- 순서 유지 X

	UNION: 합집합
		- 중복 X
		
		UNION ALL: 중복을 허용		

	INTERSECT: 교집합 - 공통 레코드
	MINUS: 차집합 - 공통 레코드 제거

	차이점)
		MySQL: INTERSECT, MINUS는 존재 X -> IN, NOT IN을 적절하게 활용해서 대체
		오라클
















SELECT 10 + 20 FROM DUAL;

SELECT * FROM EMP;

SELECT * FROM EMP WHERE SAL + 1000 > 1000;

SELECT * FROM EMP WHERE SAL <= 2000;

------------- 모두 같은 결과 -------------
SELECT * FROM EMP WHERE JOB != 'CLERK';

SELECT * FROM EMP WHERE JOB <> 'CLERK';

SELECT * FROM EMP WHERE JOB ^= 'CLERK';
----------------------------------------

SELECT * FROM EMP WHERE (JOB = 'CLERK' OR JOB = 'MANAGER') AND SAL >= 1000;
 
SELECT * FROM EMP WHERE SAL >= 1000 AND SAL <= 2000;

SELECT * FROM EMP WHERE SAL < 1000;

SELECT * FROM EMP WHERE NOT SAL < 1000;

SELECT * FROM EMP WHERE JOB = 'MANAGER';

SELECT * FROM EMP WHERE NOT JOB = 'MANAGER';

SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB = 'MANAGER' OR JOB = 'SALESMAN';
-----------------------------같은 명령어-----------------------------
SELECT * FROM EMP WHERE JOB IN('CLERK','MANAGER','SALESMAN'); -- 교집합

SELECT * FROM EMP WHERE JOB NOT IN('CLERK','MANAGER','SALESMAN'); --차집합

SELECT * FROM EMP WHERE SAL >= 1000 AND SAL <= 2000;
-----------------------------같은 명령어-----------------------------
SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 2000; -- 1000이상 2000이하

SELECT * FROM EMP WHERE SAL NOT BETWEEN 1000 AND 2000; -- 1000미만 2000초과

SELECT * FROM EMP;

---------------------LIKE---------------------
SELECT * FROM EMP WHERE ENAME LIKE 'S%'; -- S로 시작하는 패턴

SELECT * FROM EMP WHERE ENAME LIKE '%T'; -- T로 종료하는 패턴

SELECT * FROM EMP WHERE ENAME LIKE '%O%'; -- O가 중간에 포함되는 패턴

SELECT * FROM EMP;

SELECT * FROM EMP WHERE ENAME LIKE '_L%'; -- 앞글자 1자 아무거나!, 2번째글자 L로 시작하는 패턴

SELECT * FROM EMP WHERE ENAME LIKE '__L%'; -- 앞글자 2자 아무거나!, 3번째글자 L로 시작하는 패턴

CREATE TABLE EMP_LIKE AS SELECT * FROM EMP;

SELECT * FROM EMP_LIKE;

INSERT INTO EMP_LIKE (EMPNO, ENAME, JOB)
		VALUES (9998, '_ABCD', 'CLERK');
	
SELECT * FROM EMP_LIKE;

SELECT * FROM EMP_LIKE WHERE ENAME LIKE '\_A%' ESCAPE '\';

SELECT * FROM EMP_LIKE WHERE ENAME LIKE '_A%';

SELECT NULL + 1000 FROM DUAL; -- NULL은 0도 아니다!

SELECT NULL > 1000 FROM DUAL; -- NULL은 0도 아니다!

SELECT * FROM EMP;

SELECT EMPNO, ENAME, SAL, (SAL * 12 + COMM) 연봉 FROM EMP; 

SELECT * FROM EMP WHERE COMM = NULL;

SELECT * FROM EMP WHERE COMM IS NULL;

SELECT * FROM EMP WHERE COMM IS NOT NULL;

SELECT EMPNO, ENAME, SAL, (SAL * 12 + COMM) 연봉 FROM EMP; 

SELECT EMPNO, ENAME, SAL, (SAL * 12 + NVL(COMM,0)) 연봉 FROM EMP; 

SELECT EMPNO, ENAME, SAL, NVL2(COMM, SAL * 12 + COMM, SAL*12) 연봉 FROM EMP;

SELECT * FROM EMP;

SELECT * FROM EMP WHERE SAL <= 2000 ORDER BY SAL;

SELECT * FROM EMP WHERE SAL > 1000 ORDER BY SAL;

SELECT * FROM EMP WHERE SAL <= 2000
UNION
SELECT * FROM EMP WHERE SAL > 1000;
-- 중복을 허용
SELECT * FROM EMP WHERE SAL <= 2000
UNION ALL
SELECT * FROM EMP WHERE SAL >= 1000;

SELECT * FROM EMP WHERE SAL >= 2000
UNION ALL
SELECT * FROM EMP WHERE SAL <= 2500;

SELECT * FROM EMP WHERE SAL >= 2000
INTERSECT 
SELECT * FROM EMP WHERE SAL <= 2500;

SELECT * FROM EMP WHERE SAL >= 2000
MINUS
SELECT * FROM EMP WHERE SAL <= 2500;


SELECT * FROM EMP WHERE SAL <= 2500
MINUS
SELECT * FROM EMP WHERE SAL >= 2000;































