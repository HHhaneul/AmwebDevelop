조인
- 여러 테이블을 하나의 테이블처럼 사용(같은 공통 값)
SELECT ... FROM 테이블명

테이블명.컬럼명

별칭
[AS] - 컬럼, 테이블(오라클 X)

조인 종류
1. 등가 조인
	- 특정 컬럼의 값의 동일 여부
	
2. 비등가 조인
	- 암묵적인 조인
	- 값의 범위

3. 자체 조인
	- 같은 테이블내에서 조인


4. 외부 조인
	기준 테이블의 레코드는 다 나오고, 조인하는 다른 테이블은 공통값이 있으면 함께 추가로 나온다.

	왼쪽 외부 조인(Left Outer Join): WHERE 테이블1.컬럼명 = 테이블2.컬럼명(+)
	오른쪽 외부 조인(Right Outer Join): WHERE 테이블1.컬럼명(+) = 테이블2.컬럼명

	양쪽 외부 조인(Full Outer Join): 양쪽 테이블 데이터가 다 나오나, 추가 정보가 있으면 함께 나온다.
				- (+)는 정의 불가, SQL 표준 문법
				- Oracle, MSSQL 가능
				- MySQL 지원 X

SQL-99 표준 문법
1. NATURAL JOIN
	- 두 테이블에서 컬럼명, 자료형이 같으면 알아서 조인
	- 등가조인

2. JOIN ~ USING
	- 등가조인(INNER JOIN, JOIN), 외부 조인(LEFT [OUTER] JOIN, RIGHT [OUTER] JOIN)
	- FROM 테이블1 [INNER|LEFT [OUTER]|RIGHT [OUTER]] JOIN 테이블2 -- 공통 컬럼이 1개일 때 가능
	- FROM 테이블1 [INNER|LEFT [OUTER]|RIGHT [OUTER]] JOIN 테이블2 USING (공통 컬럼명) -- 공통 컬럼이 여러개일 경우!

3. JOIN ~ ON
	FROM 테이블1 [INNER|LEFT [OUTER]|RIGHT [OUTER]] JOIN 테이블2 ON 테이블1.컬럼명 = 테이블2.컬럼명;


	참고)
		boardDates - idBoard: 외래키
		boards - id: 기본키

		기본키 주로 많이 사용되는 항목: 대리키(id, seq, idx ....)
			- 외래키 명  테이블명_기본키, 기본키_테이블명
				//SELECT a.subject, b.id, b.title FROM 
					boardDates a JOIN boards b On a.idBoard = b.id;

4. OUTER JOIN
	LEFT [OUTER] JOIN: 왼쪽 테이블이 전체, 오른쪽이 추가 정보
	RIGHT [OUTER] JOIN: 오른쪽 테이블이 전체, 왼쪽이 추가 정보 
		// 현실적으로 자주 사용하지는 않을거임 오른쪽이 메인이면 많이 헷갈림
	FULL OUTER JOIN: 양쪽 외부 조인, 양쪽 모두에서 추가 정보가 있으면 표기, 없으면 NULL

5. 세 개 이상의 테이블을 조인























































































----------------------------------------------------------------------------------------------------------

SELECT * FROM EMP, DEPT ;

SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO;

SELECT * FROM EMP E, DEPT D WHERE E.DEPTNO = D.DEPTNO;

SELECT * FROM EMP E, DEPT D WHERE E.DEPTNO = D.DEPTNO AND E.SAL >= 3000;

SELECT * FROM DEPT;

CREATE TABLE DEPT_SUB (
	SUBNO NUMBER(2) CONSTRAINT DEPT_SUB_PK PRIMARY KEY,
	SNAME VARCHAR(30),
	DEPTNO NUMBER(2) CONSTRAINT DEPT_SUB_FK REFERENCES DEPT(DEPTNO)	
);

SELECT * FROM DEPT_SUB;

INSERT INTO DEPT_SUB VALUES (1, '서브정보1', 10);

INSERT INTO DEPT_SUB VALUES (2, '서브정보2', 10);

INSERT INTO DEPT_SUB VALUES (3, '서브정보3', 20);

INSERT INTO DEPT_SUB VALUES (4, '서브정보4', 40);


SELECT E.*, D.DNAME, S.SNAME FROM EMP E, DEPT D, DEPT_SUB S
	WHERE E.DEPTNO = D.DEPTNO
		AND D.DEPTNO = S.DEPTNO;

SELECT * FROM EMP;

SELECT * FROM SALGRADE;

SELECT * FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT E1.EMPNO,
	   E1.ENAME,
	   E1.MGR,
	   E2.EMPNO MGR_EMPNO,
	   E2.ENAME MGR_ENAME
	 FROM EMP E1, EMP E2
	WHERE E1.MGR = E2.EMPNO;

SELECT * FROM DEPT_SUB;

SELECT * FROM DEPT;

SELECT * FROM DEPT D, DEPT_SUB S WHERE D.DEPTNO  = S.DEPTNO; 
-- LEFT OUTER JOIN // RIGHT보다는 LEFT를 더 많이 씀.
SELECT * FROM DEPT D, DEPT_SUB S WHERE D.DEPTNO  = S.DEPTNO(+); 
-- RIGHT OUTER JOIN // RIGHT는 LEFT보다 헷갈림.
SELECT * FROM DEPT_SUB S , DEPT D WHERE S.DEPTNO(+) = D.DEPTNO; 

SELECT * FROM EMP E NATURAL JOIN DEPT; -- DEPTNO
-- 표준 SQL  -- 공통 컬럼이 1개일 때
SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E NATURAL JOIN DEPT D;
-- 공통 컬럼이 여러개여도 가능
SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E JOIN DEPT D USING(DEPTNO);

SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO;

SELECT * FROM DEPT D LEFT OUTER JOIN DEPT_SUB S USING(DEPTNO);

SELECT * FROM DEPT D LEFT JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;
-- 세개 이상의 테이블 조인
SELECT E.EMPNO, E.EMPNO , E.JOB, D.DEPTNO, D.DNAME, S.SNAME 
FROM EMP E, DEPT D, DEPT_SUB S
WHERE E.DEPTNO = D.DEPTNO
	AND D.DEPTNO = S.DEPTNO(+);
-- 세개 이상의 테이블 조인
SELECT E.EMPNO, E.EMPNO , E.JOB, D.DEPTNO, D.DNAME, S.SNAME 
	FROM EMP E
		JOIN DEPT D ON E.DEPTNO = D.DEPTNO
			LEFT JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

CREATE TABLE DEPT_JOIN AS SELECT * FROM DEPT;

SELECT * FROM DEPT_JOIN;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPT_SUB';

ALTER TABLE DEPT_JOIN DROP CONSTRAINT DEPT_SUB_PK;

ALTER TABLE DEPT_SUB DROP CONSTRAINT DEPT_SUB_FK;

ALTER TABLE DEPT_JOIN MODIFY DEPTNO CONSTRAINT DEPT_JOIN_PK
	PRIMARY KEY;

ALTER TABLE DEPT_SUB MODIFY DEPTNO CONSTRAINT DEPT_SUB_FK
	REFERENCES DEPT_JOIN(DEPTNO);

SELECT * FROM DEPT_JOIN;
SELECT * FROM DEPT_SUB;

INSERT INTO DEPT_JOIN VALUES (50, 'DATABASE', 'SEOUL');

SELECT * FROM DEPT_JOIN D FULL JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

INSERT INTO DEPT_SUB VALUES (5, '서브정보5', 60);

ALTER TABLE DEPT_SUB DISABLE CONSTRAINT DEPT_SUB_FK;

SELECT * FROM DEPT_SUB;
SELECT * FROM DEPT_JOIN;

ALTER TABLE DEPT_SUB MODIFY SUBNO CONSTRAINT DEPT_SUB_PK
	PRIMARY KEY;

------------------------------------------------------------------------------------------

CREATE TABLE DEPT_SUB (
	SUBNO NUMBER(2) CONSTRAINT DEPT_SUB_PK PRIMARY KEY,
	SNAME VARCHAR2(20),
	DEPTNO NUMBER(2)
)

INSERT INTO DEPT_SUB (SUBNO, SNAME, DEPTNO)
	VALUES (1, '서브정보1', 10);
	
INSERT INTO DEPT_SUB (SUBNO, SNAME, DEPTNO)
	VALUES (2, '서브정보2', 10);
	
INSERT INTO DEPT_SUB (SUBNO, SNAME, DEPTNO)
	VALUES (3, '서브정보3', 20);
	
INSERT INTO DEPT_SUB (SUBNO, SNAME, DEPTNO)
	VALUES (4, '서브정보4', 40);
	
-- 교집합 겹치는 부분들만 나온다.
SELECT * FROM DEPT D, DEPT_SUB S WHERE D.DEPTNO = S.DEPTNO(+);

SELECT * FROM DEPT_SUB S, DEPT D WHERE S.DEPTNO(+) = D.DEPTNO ;

SELECT * FROM DEPT_SUB;

SELECT * FROM DEPT;

SELECT * FROM EMP NATURAL JOIN DEPT; 

SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E NATURAL JOIN DEPT D; 

SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E
	JOIN DEPT D USING(DEPTNO);

-- 			기준					추가정보 OUTER는 생략 가능O
SELECT * FROM DEPT D LEFT OUTER JOIN DEPT_SUB S USING(DEPTNO);
-- 실무에서는 이거를 가장 많이 씀 컬럼명이 동일한 경우가 많이 없음.
SELECT E.EMPNO, E.ENAME, D.DNAME FROM EMP E
	JOIN DEPT D ON E.DEPTNO = D.DEPTNO;

SELECT * FROM DEPT D LEFT JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

SELECT * FROM DEPT_SUB S RIGHT JOIN DEPT D ON D.DEPTNO = S.DEPTNO;
-- 이건 헷갈림. 거의 LEFT만 사용


		-- 오라클만 사용가능 --
SELECT E.EMPNO, E.ENAME, E.JOB, D.DEPTNO, D.DNAME, S.SNAME
	FROM EMP E, DEPT D, DEPT_SUB S
		WHERE E.DEPTNO = D.DEPTNO
			AND D.DEPTNO = S.DEPTNO(+);
 
		
		-- 표준방식 --
SELECT E.EMPNO, E.ENAME, E.JOB, D.DEPTNO, D.DNAME, S.SNAME
	FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO
			LEFT JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

SELECT E.EMPNO, E.ENAME, E.JOB, D.DEPTNO, D.DNAME, S.SNAME
	FROM EMP E
		JOIN DEPT D ON E.DEPTNO = D.DEPTNO
			LEFT JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

CREATE TABLE DEPT_JOIN AS SELECT * FROM DEPT;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPT_SUB';

ALTER TABLE DEPT_SUB MODIFY DEPTNO
		CONSTRAINT DEPT_SUB_FK REFERENCES DEPT_JOIN(DEPTNO);

ALTER TABLE DEPT_JOIN MODIFY DEPTNO CONSTRAINT DEPT_JOIN_PK
	PRIMARY KEY;

SELECT * FROM DEPT_JOIN;

INSERT INTO DEPT_JOIN VALUES(50, 'DATABASE', 'SEOUL');

SELECT * FROM DEPT_JOIN D FULL JOIN DEPT_SUB S ON D.DEPTNO = S.DEPTNO;

INSERT INTO DEPT_SUB VALUES (5, '서브정보5', 60);
-- 삭제
ALTER TABLE DEPT_SUB DISABLE CONSTRAINT DEPT_SUB_FK;

SELECT * FROM DEPT_SUB;
SELECT * FROM DEPT_JOIN;














































































--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
