TDD(Test-Driven Development)

JUnit5: 단위테스트

	참고)
		단위 테스트: 기능에 대한 테스트 (메서드)
			    기능: service
				예) JoinService

		통합 테스트: MockMvc

1. 의존설정
	- junit-jupiter
	- maven-surefire-plugin

2. @Test 애노테이션과 테스트 메서드
	- 각 메서드: 테스트 단위 / @Test 애노테이션으로 지정
	- 테스트의 종류를 쉽게 파악할 수 있는 메서드명

3. 주요 단언 메서드
	- 예상되는 값이 나오는지
	- 예상되는 예외가 발생하는지
	- 예상하는 값이 true, false

참고)
TDD 기본 원칙
	- 가장 쉬운 테스트 -> 어려운 테스트 -> 기능 완성
	- 테스트가 주목적 X, 설계 O, 부가적으로 테스트가 이루어진다.
	- 테스트 -> 리팩토링 -> 테스트 -> ...
		(지속적인 리팩토링)


	참고)
		assertThrows -> 반환값: 발생된 예외 객체
		

4. 테스트 라이프사이클
1) @BeforeEach
	- 각각 모든 단위 테스트 메서드 실행 전에 처리될 메서드
	- 테스트 시에 필요한 공통 초기화

2) @AfterEach
	- 각각 모든 단위 테스트 메서드 실행 후에 처리될 메서드
	- 테스트 완료 후 정리작업(예 - 임시 파일 삭제...)

3) @BeforeAll
	- 테스트가 실행되기 전 한 번 실행 메서드(static 형태의 메서드)

4) @AfteraAll
	- 모든 테스트가 실행 후 한번만 실행 메서드(static 형태의 메서드)


5. @DisplayName, @Disabled
@DisplayName: 단위 테스트에 대한 설명
	- 클래스 명 위
	- 단위 테스트 메서드 위

@Disabled: 테스트 제외

6. 모든 테스트 실행하기

7. @TempDir: 임시 파일 생성

8. @Timeout: 성능 체크

9. assertAll -> 여러 단언들을 한꺼번에 실행


































































