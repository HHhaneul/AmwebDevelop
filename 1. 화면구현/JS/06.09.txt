14 - 1교시
12, 13
함수
Funtion 생성자 함수 객체

3. 함수의 실행흐름
4. 함수 선언문의 끌어올림
5. 값으로서의 함수
6. 참조에 의한 호출과 값에 의한 호출

변수의 유효범위
1. 전역 유효 범위와 지역 유효범위

2. 변수의 충돌

3. 함수 안에서 변수 선언과 변수 끌어올림
4. 함수 안에서 변수 선언 생략

5. 블록 유효 범위: let과 const
var지역변수: 함수 범위가 유효 범위: 사용 지양
	- 변수 선언자가 있는 새로운 변수명이더라도 기존 변수명과 동일하면 대체 - 오류 원인

ES6+
{ .... }: 변수의 유효 범위
	: 한번 선언 변수는 중복 정의X
let: 변수 - 변경 가능한 변수

const: 상수 - 변경 불가

// const로 객체를 생성할 때 const는 객체의 주소값을 가지고 있는 것이기에 변경X 안의 내용은 변경 가능!

권장 사항: 모든 변수는 const로 일단 선언, 변경이 필요할 때만 let을 사용

6. 함수 리터럴로 함수 정의하기
- 함수 객체: 값

const 변수명 = funtion(...){

};

window.변수명 = undefined;


7. 객체의 메서드
8. 즉시 실행 함수
- 정의와 동시에 실행

(function(....){
	//실행 코드
})(...);



9. 가변길이 인수 목록(Arguments 객체)
모든 함수 안에 arguments 지역변수


참고)
전개 연산자 (...)


생성자

1. 일급 객체(first class)
1) 함수 - 단일 기능
2) 함수가 값으로 사용
	- 매개변수
	- 반환값
3) 함수 객체 -> 다른 객체 생성: 생성자
4) Function 생성자로 만들어진 객체
	
	function 키워드만 정의: Function 함수명 = new Function("매개변수", "구현내용");

	Function
		.prototype
			함수 객체 실행
			.apply
			.call

			기존 함수 -> 새로운 함수
			.bind

참고)
	자바스크립트: 상속 - 하위 객체가 상위 객체의 자원 공유
	[[Prototype]]: __proto__: 프로토타입 체인 - 상속 관계

생성자 함수
	- prototype 속성
	- prototype
		.constructor 속성: 함수의 원형을 참조하는 참조 값

new 함수()

ES6+
클래스 구문

class 클래스명 {
	constructor(){
		this.변수명 = 값;
	}
	메서드 명
}

MDN


객체를 생성하는 과정(new ....)
	- 1) 생성자 함수의 prototype 속성 상속
	- 2) this의 범위를 변경 함으로써 값의 초기화


참고)
	상송
		- 하위 객체가 -> 상위 객체의 자원 공유
		- 프로토타입 체인의 연결
		- [[Prototype]] / __proto__




함수명: 카멜 표기법
	
생성자 함수명: 파스칼 표기법
		모든 단어의 앞글자를 대문자






























------------------------------------------------------------------------------------------
window 객체

Global EC(Execution Context): 전역 EC {
	변수 레코드 :
		window.num0 = 5;
	외부 변수 참조: null

	this 바인딩: window
}
Outer EC(Execution Context) {
	변수 레코드
		num1: 10
	외부 변수 참조: Global EC 변수 레코드
	
	this 바인뎅: this 범위가 결정 - 함수를 호출한 객체
}
Inner EC(Execution Context) {
	변수 레코드
		num2: 20
	외부 변수 참조: Outer EC 변수 레코드

	this 바인딩: this 범위가 결정 - 함수를 호출한 객체
}

자바스크립트에서 this: 호출 시에 결정 되므로 호출 전에 this 범위를 미지 지정









-----------------------------------------------------------------------------------------

function outer(num1) {
    return function inner(num2) {
        return num1 + num2;
    };
}
undefined
const inner1 = outer(10);
undefined
const inner2 = outer(20);
undefined
outer(10)(20);
30

클로저?

------------------------------------------------------------------------------------------------------------------------------

function

	__proto__ = Function.prototype



p1.__proto__ = Person.prototype






---------------------------------------------------------------------------------------------------------------------

네이티브 객체 (ECMAScript)
	- 내장 생성자 객체

	- 내장 객체

호스트 객체(- 실행환경에 따라 다르게 제공되는 객체)
	- 웹 브라우저 객체















