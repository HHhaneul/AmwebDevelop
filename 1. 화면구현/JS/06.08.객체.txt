객체

1. 객체 리터럴
- 객체는 이름과 값을 한쌍으로 묶은 데이터를 여러개 모은 것
- 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.

2. 객체 리터럴로 객체 생성하기
	{
		이름(속성명): "값"(속성값),
		...		
		이름: "값"
	}

	마침표 (.)
	변수.객체의 속성명

	변수.속성명=값; // 변경

	참고)
		[]: 객체의 속성명을 접근하는 연산자
		변수['속성명']
		변수[속성이 담겨있는 변수]

3. 프로퍼티 추가와 삭제
	객체에 없는 속성명에 값을 대입 -> 추가

	delete 변수.속성명;

4. in 연산자로 프로퍼티가 있는지 확인하기
	-> 속성명의 존재 유무 체크하는 연산자
	-> for문과 함께 쓰이는 경우가 많다.

5. 메서드
	- 객체 안에 정의된 함수
	- 변수명.함수명();
	-

6. 객체는 참조 타입
	- 변수: 객체의 주소값

★☆★☆★☆함수☆★★☆★☆
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은 것
- 기능


1. 함수 선언문으로 함수 정의하기
function 함수명 (매개변수, 매개변수, ...	){
	// 실행 코드 정의되는 영역
	
	return 반환값;
}



2. 함수 호출
- 함수명(값, ....); // 실행

함수 - 함수 객체 -> 실행X

- 표현문 함수

- 함수 객체 -> 번역 -> EC(Execution Context - 실행문맥 객체) -> 실행(스택)
- 함수 안에 함수 정의 가능


참고)
	자바, C
		실행문 함수
			-> 함수 안에 함수 정의X





















--------------------------------------------------------------------------------------
{
	이름(속성명): 값(속성값),
	이름: 값,
	...
}


변수명.속성명;

//변경
변수명.속성명 = 값; // 변경

//추가
변수명.없는 속성명 = 값; // 추가

//삭제
delete 변수명.속성명; // 삭제

----------------------------------------------------------------------------------------
- 브라우저의 탭 클릭 시 -> window

Global EC - 전역 환경 실행 문맥 객체
	변수 레코드:	
		window 객체의 하위 속성 값으로 재구성
		window.num1: 10;

	this 바인딩: window

Outer EC(Execution Context){
	변수 레코드
		num1: 30
		num2: 20
	외부 변수 참조: Global EC 변수 레코드

	this 바인딩: this는 함수를 호출한 객체
}

Inner EC(Execution Context) {
	변수 레코드
		num3: 10

	외부 변수 참조: Outer EC 변수 참조

	this 바인딩: this는 함수를 호출한 객체
}


전역변수 / 위
지역변수 / 본인
------------------------------------------------------
Outer EC {
	변수 레코드
		num1: 30
}

Inner1 EC {
	변수 레코드
		num2: 20
	외부 변수 참조: Outer EC 변수 참조
}

Inner2 EC{
	변수레코드
		num3: 30
	외부 변수 레코드 참조: Inner1EC 변수 레코드
}

	













