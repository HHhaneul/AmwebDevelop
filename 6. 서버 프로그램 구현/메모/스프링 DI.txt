스프링 DI 설정 및 사용
1. 스프링을 이용한 객체 조립과 사용
2. DI 방식 1 : 생성자 방식
3. DI 방식2 : 세터 메서드 방식
4. @Configuration
	- 스프링이 관리할 객체에 대한 설정임을 알려주는 애노테이션

5. @Bean
	- 스프링이 관리할 객체임을 알려주는 애노테이션
	- getBean: 스프링 컨테이너에서 객체를 조회
	
6. 두 개 이상의 설정 파일 사용하기
1) 생성자 매개변수
2) @Import 


의존 자동 주입
1. @Autowired
	1) 멤버 변수
	2) setter 메서드
		- setter 메서드 호출, 매개변수 스프링 관리 객체에 있으면 자동 주입
	3) Optional 객체
	4) @Autowired를 추가하지 않고 의존성을 자동 주입하는 방법
		- 생성자 매개변수로 의존성을 추가
		- 기본 생성자 X
		- 컴포넌트 스캔 범위에서 자동 등록된 빈


	참고)
		Optional 클래스

		class Optional<T> {
			...
			private final T value
			...
		}

2. 일치하는 빈이 없는 경우
	- 의존성 주입을 해야할 때 없는 경우는 오류가 발생

3. @Qualifier
	1) 동일한 자료형이 빈이 여러개 있는 경우, 의존성 자동 주입 시 오류 발생
	2) 주입할 빈의 이름을 명시

4. 빈 이름과 기본 한정자
	1) 빈 이름은 메서드 명

5. @Autowired 애노테이션의 필수 여부
	- 의존성 자동 주입 시 스프링 컨테이너에 객체가 존재 X -> 오류
	- 의존성은 반드시 정의 되어있어야 된다. (기본 값)

	required: false
		- 의존성에 해당하는 객체가 스프링 컨테이너에 없으면 setter 메서드가 호출 X

	@Nullable
		- setter 메서드는 호출, 의존성에 해당하는 객체가 스프링 컨테이너에 없으면 null값을 주입

컴포넌트 스캔
1. @Component
2. @ComponentScan
	- 스캔 범위에 대한 패키지
	- 패키지명, 하위패키지

3. 기본 스캔 대상
	@Component ☆
	@Service ☆
	@Inject
	
	특정 역할과 관련된 애노테이션
	@Configuration
	@Controller
	@RestController
	@Repository
	@Aspect
	@ControllerAdvice
	@RestControllerAdvice

	빈의 이름은 클래스명을 기준으로 첫 글자만 소문자로 변경해서 생성

4. 컴포넌트 스캔에 따른 충돌 처리
1) 빈 이름 충돌
	- 빈의 이름을 기본 스캔 대상에 해당하는 애노테이션의 설정(value)을 이용해서 이름을 변경

2)  수동 등록한 빈과 충돌
	- 자동 스캔 빈의 이름과 수동 등록한 빈의 이름이 동일하면 수동 등록한 빈이 우선 한다.

3) @ComponentScan
	- excludeFilters

	- AspectJ
		ANT 패턴

		aspectjweaver 의존성 추가

빈 라이프 사이클과 범위
1. 컨테이너 초기화 : 빈 객체의 생성, 의존 주입, 초기화

2. 컨테이너 종료 : 빈 객체의 소멸

3. 빈 객체의 라이프 사이클
1) 객체 생성 -> 의존 설정 -> 초기화 -> 소멸
2) InitializingBean 인터페이스
	- afterPropertiesSet(...): 초기화 단계에서 호출
	- 객체가 완전하게 생성된 시점 이후에 할 초기 작업 예) - 설정...

3) DisposableBean 인터페이스
	- destory(): 소멸 직전에 호출
				주로 하는 작업: 자원 해제

4.  빈 객체의 초기화와 소멸 : 커스텀 메서드
- 외부 라이브러리 - 소스 수정 불가

@Bean
1) initMethod 
	- InitializingBean과 동일 역할
	
2) destroyMethod 
	- DisposableBean과 동일 역할

5. 빈 객체의 생성과 관리 범위
@Scope 
	- singleton: 동일 객체
	- prototype: 새로운 객체