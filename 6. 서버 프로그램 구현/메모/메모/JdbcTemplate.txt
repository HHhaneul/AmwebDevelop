JdbcTemplate
1. 설치 및 설정 
1) spring-jdbc 
2) tomcat-jdbc
	- 커넥션 풀 
		- 미리 연결 객체를 여러개 생성해서 필요할때마다 빌려주고, 회수하는 방식 
		- 반응성, 성능 향상의 효과 

+ spring-context
+ lombok
+ ojdbc8

2. DataSource 설정

3. JdbcTemplate을 이용한 쿼리실행 
1) query(): 데이터 목록 조회, SELECT 문
- List query(String sql, RowMapper rowMapper)
- List query(String sql, Object[] args, RowMapper rowMapper)
- List query(String sql, RowMapper rowMapper, Object... args)



2) T queryForObject(): 데이터 레코드 한개, 단일 값 - 통계 데이터: 합계, 평균 ...
	- 조회된 데이터가 한개 레코드가 아니면(0개 이거나 2개 이상 경우): 예외 발생
	- try~catch로 예외처리

3) update(): 데이터 변경 쿼리 - INSERT, UPDATE, DELETE / 반환값 반영된 레코드 개수
- int update(String sql)
- int update(String sql, Object... args)

참고)
	쿼리 수행 시 기본적으로 로그는 출력 X
	slf4j api
	logback classic

	로그레벨
	FATAL
	ERROR
	WARN
	INFO
	DEBUG
	TRACE


4. PreparedStatementCreator를 이용한 쿼리 실행
5. INSERT 쿼리 실행 시 KeyHolder를 이용해서 자동 생성 키값 구하기
6. 스프링의 익셉션 변환 처리
	- 각 연동 기술에 따라 발생하는 익셉션을 스프링이 제공하는 익셉션으로 변환함으로써 다음과 같이 구현 기술에 상관없이 동일한 코드로 익셉션을 처리할 수 있게 된다.
	SQLExcpetion, HibernateException, PersistenceException ->  DataAccessException
	(RuntimeException)
	
7. 트랜잭션 처리
- @Transactional


트랜잭션?

setAutoCommit(false)

1. SQL1
2. SQL2
3. SQL3
4. SQL4


commit();


클래스에 정의된 모든 메서드가 적용
-> 클래스명 위에 정의

틀정 메서드만 적용
-> 특정 메서드명 위에 정의


















